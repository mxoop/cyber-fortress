import{_ as n,o as s,c as a,d as e}from"./app-A6Lz_ld8.js";const t={},p=e(`<h1 id="优雅的coder养成系列丨bifunction使用" tabindex="-1"><a class="header-anchor" href="#优雅的coder养成系列丨bifunction使用"><span>优雅的coder养成系列丨BiFunction使用</span></a></h1><hr><blockquote><p><code>BiFunction</code> 是 Java 8 引入的一个函数式接口，它表示接受两个输入参数并生成一个结果的函数。它是 <code>java.util.function</code> 包中的一部分，非常适合在需要将两个输入映射到一个输出的场景中使用。<code>BiFunction</code> 可以用来简化代码，使其更具可读性和可维护性。</p></blockquote><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p><code>BiFunction</code> 接口的定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>T</code> 和 <code>U</code> 是输入参数的类型。</p></li><li><p><code>R</code> 是返回结果的类型。</p></li><li><p><code>apply(T t, U u)</code> 方法用于处理两个输入并返回结果。</p></li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p><code>BiFunction</code> 常用于以下场景：</p><ul><li>当你需要将两个不同类型的参数传递到一个方法中，并根据这两个参数的值返回结果时。</li><li>当你想要传递一个方法引用或 lambda 表达式作为参数，以便在方法中执行相同的操作。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>以下是一个示例，展示如何使用 <code>BiFunction</code> 来简化代码。</p><p>假设我们有一个业务需求，基于不同的 <code>shipmentType</code> 从不同的数据源（如工厂、门店、经销商）中获取扫描标签信息。为了避免重复代码，我们可以使用 <code>BiFunction</code> 将具体的查询逻辑传递给一个通用的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">BiFunction</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token comment">// 示例 DTO 和 VO 类</span>
<span class="token keyword">class</span> <span class="token class-name">DealerScanLabelDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> outStId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> productId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ShipmentType</span> flag<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DealerScanLabelVO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> traceCode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> epc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isMix<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DealerScanProductInfoVO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> traceCode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> epc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isMix<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>

<span class="token comment">// 枚举类型</span>
<span class="token keyword">enum</span> <span class="token class-name">ShipmentType</span> <span class="token punctuation">{</span>
    <span class="token constant">FACTORY</span><span class="token punctuation">,</span> <span class="token constant">STORE</span><span class="token punctuation">,</span> <span class="token constant">DEALER</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例 Mapper 类</span>
<span class="token keyword">interface</span> <span class="token class-name">DealerInStorageMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanProductInfoVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectScanProductInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> outStId<span class="token punctuation">,</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanProductInfoVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectScanProductInfoFromStores</span><span class="token punctuation">(</span><span class="token class-name">Long</span> outStId<span class="token punctuation">,</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanProductInfoVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectScanProductInfoFromDealer</span><span class="token punctuation">(</span><span class="token class-name">Long</span> outStId<span class="token punctuation">,</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 示例服务类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DealerScanService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">DealerInStorageMapper</span> dealerInStorageMapper<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DealerScanService</span><span class="token punctuation">(</span><span class="token class-name">DealerInStorageMapper</span> dealerInStorageMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dealerInStorageMapper <span class="token operator">=</span> dealerInStorageMapper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanLabelVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getScanLabelInfo</span><span class="token punctuation">(</span><span class="token class-name">DealerScanLabelDTO</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanLabelVO</span><span class="token punctuation">&gt;</span></span> labelVO<span class="token punctuation">;</span>

        <span class="token class-name">ShipmentType</span> shipmentType <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>shipmentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">FACTORY</span><span class="token operator">:</span>
                <span class="token comment">// 从工厂获取</span>
                labelVO <span class="token operator">=</span> <span class="token function">getLabel</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> dealerInStorageMapper<span class="token operator">::</span><span class="token function">selectScanProductInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">STORE</span><span class="token operator">:</span>
                <span class="token comment">// 从门店获取</span>
                labelVO <span class="token operator">=</span> <span class="token function">getLabel</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> dealerInStorageMapper<span class="token operator">::</span><span class="token function">selectScanProductInfoFromStores</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">DEALER</span><span class="token operator">:</span>
                <span class="token comment">// 从经销商获取</span>
                labelVO <span class="token operator">=</span> <span class="token function">getLabel</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> dealerInStorageMapper<span class="token operator">::</span><span class="token function">selectScanProductInfoFromDealer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported shipment type: &quot;</span> <span class="token operator">+</span> shipmentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> labelVO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanLabelVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLabel</span><span class="token punctuation">(</span><span class="token class-name">DealerScanLabelDTO</span> dto<span class="token punctuation">,</span>
                                             <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanProductInfoVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selectScanProductInfoFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DealerScanProductInfoVO</span><span class="token punctuation">&gt;</span></span> labels <span class="token operator">=</span> selectScanProductInfoFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getOutStId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> labels<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>label <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DealerScanLabelVO</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DealerScanLabelVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setTraceCode</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span><span class="token function">getTraceCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setEpc</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span><span class="token function">getEpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setTid</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span><span class="token function">getTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setIsMix</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span><span class="token function">getIsMix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h2><ul><li><p><strong><code>BiFunction</code> 使用</strong>：在 <code>getScanLabelInfo</code> 方法中，我们根据 <code>shipmentType</code> 使用不同的查询方法。这些查询方法都是 <code>BiFunction&lt;Long, Long, List&lt;DealerScanProductInfoVO&gt;&gt;</code> 类型的函数。我们将这些方法作为参数传递给 <code>getLabel</code> 方法来获取扫描标签信息。</p></li><li><p><strong>代码简化</strong>：通过使用 <code>BiFunction</code>，我们将查询逻辑与标签转换逻辑分开，避免了重复代码，使代码更加简洁和易于维护。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>BiFunction</code> 是一个强大的工具，它允许你将两个输入映射到一个输出，并在需要处理多个参数的场景中提供灵活性。通过合理使用 <code>BiFunction</code>，可以显著简化代码并提高可读性。</p>`,18),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","elegant_coder_training_01.html.vue"]]),d=JSON.parse('{"path":"/essay/elegant_coder_training_01.html","title":"优雅的coder养成系列丨BiFunction使用","lang":"zh-CN","frontmatter":{"order":2,"star":true,"date":"2024-08-07T00:00:00.000Z","copyright":false,"footer":true,"category":["随笔"],"tag":["随笔","优雅的coder养成系列"]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1723008369000,"updatedTime":1723008369000,"contributors":[{"name":"mxoop","email":"1592013653@qq.com","commits":1}]},"readingTime":{"minutes":2.59,"words":778},"filePathRelative":"essay/elegant_coder_training_01.md","localizedDate":"2024年8月7日","excerpt":"\\n<hr>\\n<blockquote>\\n<p><code>BiFunction</code> 是 Java 8 引入的一个函数式接口，它表示接受两个输入参数并生成一个结果的函数。它是 <code>java.util.function</code> 包中的一部分，非常适合在需要将两个输入映射到一个输出的场景中使用。<code>BiFunction</code> 可以用来简化代码，使其更具可读性和可维护性。</p>\\n</blockquote>\\n<h2>基本概念</h2>\\n<p><code>BiFunction</code> 接口的定义如下：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@FunctionalInterface</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">BiFunction</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">U</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">R</span> <span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> t<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">U</span> u<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,d as data};
