import{_ as n,o as s,c as a,d as t}from"./app-BJyFqn_P.js";const p={},e=t(`<h1 id="高效处理多线程任务的工具类" tabindex="-1"><a class="header-anchor" href="#高效处理多线程任务的工具类"><span>高效处理多线程任务的工具类</span></a></h1><hr><blockquote><p>在多线程编程中，任务的并行处理和结果的有效聚合是性能优化的关键。<code>TaskExecutorUtil</code> 是一个用于简化和优化这些操作的工具类。本文将详细介绍 <code>TaskExecutorUtil</code> 的功能、核心方法及接口，并提供实际使用示例，帮助开发者更好地理解和运用该工具类。</p></blockquote><h2 id="工具类概述" tabindex="-1"><a class="header-anchor" href="#工具类概述"><span>工具类概述</span></a></h2><p><code>TaskExecutorUtil</code> 旨在帮助开发人员高效地执行大量并行任务。它通过将任务分割成小批次，在自定义线程池中并行处理，并将处理结果聚合到指定类型的集合中，来提高任务处理的效率。这种设计使得 <code>TaskExecutorUtil</code> 在处理大规模任务时特别有用，能够适应各种任务和结果集合需求。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorUtil</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 执行任务，并返回指定类型的集合
     * <span class="token keyword">@param</span> <span class="token parameter">list</span> 原始集合
     * <span class="token keyword">@param</span> <span class="token parameter">task</span> 任务处理方法
     * <span class="token keyword">@param</span> <span class="token parameter">executor</span> 自定义线程池
     * <span class="token keyword">@param</span> <span class="token parameter">partitionCount</span> 分区数量
     * <span class="token keyword">@param</span> <span class="token parameter">partitionSize</span> 每个分区的大小
     * <span class="token keyword">@param</span> <span class="token parameter">description</span> 任务描述
     * <span class="token keyword">@param</span> <span class="token parameter">collectionFactory</span> 集合类型工厂
     * <span class="token keyword">@return</span> 处理结果集合
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">C</span> <span class="token function">executeTasks</span><span class="token punctuation">(</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span>
            <span class="token class-name">TaskAll</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">,</span>
            <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span>
            <span class="token class-name">Integer</span> partitionCount<span class="token punctuation">,</span>
            <span class="token class-name">Integer</span> partitionSize<span class="token punctuation">,</span>
            <span class="token class-name">String</span> description<span class="token punctuation">,</span>
            <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> collectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> collectionFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务正在执行！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;任务列表大小：{}, 指定分区数量：{}，指定分区大小：{}&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partitionCount<span class="token punctuation">,</span> partitionSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> partitions <span class="token operator">=</span> <span class="token function">partitionList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> partitionCount<span class="token punctuation">,</span> partitionSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> partitions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>partition <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> task<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Exception in task: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futures<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error in the queue: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> futures<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>collectionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 执行异步任务
     * <span class="token keyword">@param</span> <span class="token parameter">task</span> 异步任务
     * <span class="token keyword">@param</span> <span class="token parameter">executor</span> 任务线程池
     * <span class="token keyword">@param</span> <span class="token parameter">description</span> 任务描述
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeAsyncTask</span><span class="token punctuation">(</span><span class="token class-name">AsyncTask</span> task<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务正在执行！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>task<span class="token operator">::</span><span class="token function">execute</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Exception in task: &quot;</span> <span class="token operator">+</span> description <span class="token operator">+</span><span class="token string">&quot;--&quot;</span><span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 执行异步任务并返回 CompletableFuture
     * <span class="token keyword">@param</span> <span class="token parameter">task</span> 异步任务
     * <span class="token keyword">@param</span> <span class="token parameter">executor</span> 任务线程池
     * <span class="token keyword">@param</span> <span class="token parameter">description</span> 任务描述
     * <span class="token keyword">@return</span> CompletableFuture
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">executeAsyncTaskFuture</span><span class="token punctuation">(</span><span class="token class-name">AsyncTask</span> task<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;任务正在执行！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>task<span class="token operator">::</span><span class="token function">execute</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Exception in task: &quot;</span> <span class="token operator">+</span> description <span class="token operator">+</span><span class="token string">&quot;--&quot;</span><span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">partitionList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partitionCount<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partitionSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>partitionCount <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> partitionSize <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">dynamicPartition</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>partitionCount <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> partitionCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>partitionSize <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> partitionSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Either partitionCount or partitionSize must be specified.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">dynamicPartition</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> listSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> partitionCount <span class="token operator">=</span> <span class="token function">calculatePartitionCount</span><span class="token punctuation">(</span>listSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;---------------partition task size:&quot;</span> <span class="token operator">+</span> partitionCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> partitionCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> partitionCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> partitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> listSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> listSize <span class="token operator">/</span> partitionCount<span class="token punctuation">;</span>
        <span class="token keyword">int</span> remainingElements <span class="token operator">=</span> listSize <span class="token operator">%</span> partitionCount<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> partitionCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> batchSize <span class="token operator">+</span> <span class="token punctuation">(</span>remainingElements<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            partitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>index <span class="token operator">+</span> size<span class="token punctuation">,</span> listSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">+=</span> size<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> partitions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculatePartitionCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> listSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> availableProcessors <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>listSize<span class="token punctuation">,</span> availableProcessors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskAll</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">C</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心方法" tabindex="-1"><a class="header-anchor" href="#核心方法"><span>核心方法</span></a></h2><h3 id="executetasks-方法" tabindex="-1"><a class="header-anchor" href="#executetasks-方法"><span><code>executeTasks</code> 方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">C</span> <span class="token function">executeTasks</span><span class="token punctuation">(</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span>
        <span class="token class-name">TaskAll</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">,</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span>
        <span class="token class-name">Integer</span> partitionCount<span class="token punctuation">,</span>
        <span class="token class-name">Integer</span> partitionSize<span class="token punctuation">,</span>
        <span class="token class-name">String</span> description<span class="token punctuation">,</span>
        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> collectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>方法参数</p><ul><li><p><strong><code>list</code></strong>: 需要处理的任务列表。</p></li><li><p><strong><code>task</code></strong>: 任务处理逻辑，定义了如何处理每个任务分区。</p></li><li><p><strong><code>executor</code></strong>: 自定义线程池，用于异步执行任务。</p></li><li><p><strong><code>partitionCount</code></strong>: 分区数量，指定将任务列表分成多少个批次。优先级高于 <code>partitionSize</code>。</p></li><li><p><strong><code>partitionSize</code></strong>: 每个分区的大小，指定每个批次包含多少任务。</p></li><li><p><strong><code>description</code></strong>: 任务的描述，用于日志记录。</p></li><li><p><strong><code>collectionFactory</code></strong>: 创建结果集合的工厂方法。</p></li></ul></li><li><p>方法功能</p></li></ul><p><code>executeTasks</code> 方法的主要功能是将任务列表分割成多个批次，并使用指定的线程池并行处理这些批次。处理完成后，将结果聚合到由 <code>collectionFactory</code> 提供的集合实例中。这种设计允许用户自定义任务处理的分区方式和结果集合的类型，从而灵活适应不同的任务处理需求。</p><ul><li>处理步骤</li></ul><ol><li><strong>任务分区</strong>: 根据 <code>partitionCount</code> 和 <code>partitionSize</code>，将任务列表分割成多个批次。如果两者都未提供，则动态计算分区数。</li><li><strong>异步处理</strong>: 使用 <code>CompletableFuture</code> 和指定的线程池并行处理每个任务分区。</li><li><strong>结果聚合</strong>: 将所有任务分区的处理结果聚合到指定类型的集合中。</li></ol><h3 id="executeasynctask-方法" tabindex="-1"><a class="header-anchor" href="#executeasynctask-方法"><span><code>executeAsyncTask</code> 方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeAsyncTask</span><span class="token punctuation">(</span><span class="token class-name">AsyncTask</span> task<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>方法参数</p><ul><li><p><strong><code>task</code></strong>: 要执行的异步任务。</p></li><li><p><strong><code>executor</code></strong>: 自定义的线程池，用于异步执行任务。</p></li><li><p><strong><code>description</code></strong>: 任务的描述，用于日志记录。</p></li></ul></li><li><p>方法功能</p></li></ul><p><code>executeAsyncTask</code> 方法用于异步执行单个任务。这种方法适用于那些需要在后台线程中执行的任务，例如耗时的计算或网络请求。</p><h3 id="executeasynctaskfuture-方法" tabindex="-1"><a class="header-anchor" href="#executeasynctaskfuture-方法"><span><code>executeAsyncTaskFuture</code> 方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">executeAsyncTaskFuture</span><span class="token punctuation">(</span><span class="token class-name">AsyncTask</span> task<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span> executor<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>方法参数</p><ul><li><p><strong><code>task</code></strong>: 要执行的异步任务。</p></li><li><p><strong><code>executor</code></strong>: 自定义的线程池，用于异步执行任务。</p></li><li><p><strong><code>description</code></strong>: 任务的描述，用于日志记录。</p></li></ul></li><li><p>方法功能</p></li></ul><p><code>executeAsyncTaskFuture</code> 方法与 <code>executeAsyncTask</code> 类似，但返回一个 <code>CompletableFuture</code> 对象。这个 <code>CompletableFuture</code> 允许调用者在任务完成后进行进一步操作，如处理结果或捕获异常。</p><h2 id="关键接口" tabindex="-1"><a class="header-anchor" href="#关键接口"><span>关键接口</span></a></h2><h3 id="taskall-接口" tabindex="-1"><a class="header-anchor" href="#taskall-接口"><span><code>TaskAll</code> 接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskAll</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">C</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>泛型说明</p><ul><li><p><strong><code>T</code></strong>: 输入数据的类型，表示任务处理的单个数据项。</p></li><li><p><strong><code>R</code></strong>: 任务处理后的结果类型。</p></li><li><p><strong><code>C</code></strong>: 结果集合类型，必须是 <code>Collection&lt;R&gt;</code> 的子类，例如 <code>List&lt;R&gt;</code> 或 <code>Set&lt;R&gt;</code>。</p></li></ul></li><li><p>方法功能</p></li></ul><p><code>TaskAll</code> 接口用于定义任务的处理逻辑。<code>execute</code> 方法接收一个任务分区并返回处理结果集合。通过实现这个接口，用户可以自定义任务处理逻辑，并指定结果集合的类型。</p><h3 id="asynctask-接口" tabindex="-1"><a class="header-anchor" href="#asynctask-接口"><span><code>AsyncTask</code> 接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncTask</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法功能</li></ul><p><code>AsyncTask</code> 接口用于定义异步任务的执行逻辑。通过实现这个接口，可以将任务提交到线程池中进行异步处理。</p><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><h3 id="使用-executetasks-方法" tabindex="-1"><a class="header-anchor" href="#使用-executetasks-方法"><span>使用 <code>executeTasks</code> 方法</span></a></h3><p>假设我们有一个任务列表，每个任务是一个字符串，我们希望将每个字符串处理后收集到一个 <code>List</code> 中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;task1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;task3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 实现 TaskAll 接口</span>
        <span class="token class-name">TaskAll</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> partition <span class="token operator">-&gt;</span> partition<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>task <span class="token operator">-&gt;</span> task <span class="token operator">+</span> <span class="token string">&quot;-processed&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> <span class="token class-name">TaskExecutorUtil</span><span class="token punctuation">.</span><span class="token function">executeTasks</span><span class="token punctuation">(</span>
                tasks<span class="token punctuation">,</span>
                task<span class="token punctuation">,</span>
                executor<span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Processing Tasks&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出处理后的任务结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-executeasynctaskfuture" tabindex="-1"><a class="header-anchor" href="#使用-executeasynctaskfuture"><span>使用 <code>executeAsyncTaskFuture</code></span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskFutureExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AsyncTask</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异步任务逻辑</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Async task executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">TaskExecutorUtil</span><span class="token punctuation">.</span><span class="token function">executeAsyncTaskFuture</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token string">&quot;Example Async Task Future&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task completed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>ex <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                  <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task failed: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>TaskExecutorUtil</code> 是一个功能强大的工具类，用于简化和优化多线程任务的处理。通过灵活的接口设计和泛型支持，它允许开发者在自定义线程池中并行处理任务，并将结果聚合到不同类型的集合中。掌握这一工具类的使用可以帮助开发者更高效地处理并发任务，提升应用性能。希望这篇指南能帮助你全面理解和运用 <code>TaskExecutorUtil</code>。</p>`,38),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","task_util.html.vue"]]),r=JSON.parse('{"path":"/essay/task_util.html","title":"高效处理多线程任务的工具类","lang":"zh-CN","frontmatter":{"order":3,"star":true,"date":"2024-08-07T00:00:00.000Z","copyright":false,"footer":true,"category":["随笔"],"tag":["随笔","多线程"]},"headers":[{"level":2,"title":"工具类概述","slug":"工具类概述","link":"#工具类概述","children":[]},{"level":2,"title":"核心方法","slug":"核心方法","link":"#核心方法","children":[{"level":3,"title":"executeTasks 方法","slug":"executetasks-方法","link":"#executetasks-方法","children":[]},{"level":3,"title":"executeAsyncTask 方法","slug":"executeasynctask-方法","link":"#executeasynctask-方法","children":[]},{"level":3,"title":"executeAsyncTaskFuture 方法","slug":"executeasynctaskfuture-方法","link":"#executeasynctaskfuture-方法","children":[]}]},{"level":2,"title":"关键接口","slug":"关键接口","link":"#关键接口","children":[{"level":3,"title":"TaskAll 接口","slug":"taskall-接口","link":"#taskall-接口","children":[]},{"level":3,"title":"AsyncTask 接口","slug":"asynctask-接口","link":"#asynctask-接口","children":[]}]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[{"level":3,"title":"使用 executeTasks 方法","slug":"使用-executetasks-方法","link":"#使用-executetasks-方法","children":[]},{"level":3,"title":"使用 executeAsyncTaskFuture","slug":"使用-executeasynctaskfuture","link":"#使用-executeasynctaskfuture","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1723018417000,"updatedTime":1723018417000,"contributors":[{"name":"mxoop","email":"1592013653@qq.com","commits":1}]},"readingTime":{"minutes":6.11,"words":1833},"filePathRelative":"essay/task_util.md","localizedDate":"2024年8月7日","excerpt":"\\n<hr>\\n<blockquote>\\n<p>在多线程编程中，任务的并行处理和结果的有效聚合是性能优化的关键。<code>TaskExecutorUtil</code> 是一个用于简化和优化这些操作的工具类。本文将详细介绍 <code>TaskExecutorUtil</code> 的功能、核心方法及接口，并提供实际使用示例，帮助开发者更好地理解和运用该工具类。</p>\\n</blockquote>\\n<h2>工具类概述</h2>\\n<p><code>TaskExecutorUtil</code> 旨在帮助开发人员高效地执行大量并行任务。它通过将任务分割成小批次，在自定义线程池中并行处理，并将处理结果聚合到指定类型的集合中，来提高任务处理的效率。这种设计使得 <code>TaskExecutorUtil</code> 在处理大规模任务时特别有用，能够适应各种任务和结果集合需求。</p>"}');export{k as comp,r as data};
