import{_ as n,o as s,c as a,d as e}from"./app-D_rNMysR.js";const t={},l=e(`<h1 id="mysql优化丨项目刚上线" tabindex="-1"><a class="header-anchor" href="#mysql优化丨项目刚上线"><span>Mysql优化丨项目刚上线</span></a></h1><p><em><strong>前言：</strong></em> 本文记录的是一次从开发到测试环境上线的接口调优之MySQL调优手段以及部署上线压测遇到的其他问题解决</p><hr><h2 id="_1、如何优化mysql" tabindex="-1"><a class="header-anchor" href="#_1、如何优化mysql"><span>1、如何优化Mysql?</span></a></h2><p>最好是按照以下顺序优化：</p><ol><li>SQL 语句及索引的优化</li><li>数据库表结构的优化</li><li>系统配置的优化</li><li>硬件的优化</li></ol><h2 id="_2、如何加索引" tabindex="-1"><a class="header-anchor" href="#_2、如何加索引"><span>2、如何加索引？</span></a></h2><p>在加索引之前我们首先要知道MySQL索引一共有哪些类型以及它们的区别，对数据库有哪些影响。所以在加索引之前要考虑以下几点：</p><ul><li>索引有哪些类型？主键、唯一索引、联合索引、普通索引</li><li>每种的索引的应用场景是什么？</li><li>建立索引的原则？</li><li>什么情况不应该建立索引？</li><li>什么情况索引会失效？</li><li>对数据库带来的影响？</li></ul><p>&quot;<em>本章节类容对索引不作详细讨论</em>&quot;</p><h2 id="_3、场景回顾" tabindex="-1"><a class="header-anchor" href="#_3、场景回顾"><span>3、场景回顾</span></a></h2><p><em>背景：项目准备上线，计划首先部署在测服务器，执行流程测试，观测核心业务在并发测试下的性能如何，并在这期间调整服务器相关配置。当前要测试的核心业务接口简要说明一下：根据上传的EPC去五张大表和4张中间表中查询它的五级关联关系，五张大表分别对应不同类型的EPC，通过查询结果往不同的表入库（更新/新增）的过程。</em></p><p>使用<code>jmeter</code>测试时发现在并发量比较低时并没有报错，当并发量上去问题就出来了。</p><h3 id="a-获取数据库连接超时" tabindex="-1"><a class="header-anchor" href="#a-获取数据库连接超时"><span>a. 获取数据库连接超时</span></a></h3><p>数据库连接超时可能有多种原因，包括但不限于以下几点：</p><ul><li><p><strong>网络问题：</strong></p><ul><li>网络不稳定或者延迟高可能导致连接超时。这可能是因为网络拥塞、防火墙配置问题、或者数据库服务器故障等原因造成的。</li></ul></li><li><p><strong>数据库服务器负载过高：</strong></p><ul><li>数据库服务器的负载过高可能导致无法及时处理新的连接请求，从而造成连接超时。</li></ul></li><li><p><strong>数据库配置问题：</strong></p><ul><li>数据库连接池配置不合理，连接池中的连接数量不足，或者连接超时设置过短等都可能导致连接超时。</li></ul></li><li><p><strong>数据库服务器配置问题：</strong></p><ul><li>数据库服务器配置不当，例如内存不足、磁盘空间不足等，可能会影响数据库的正常运行，进而导致连接超时。</li></ul></li><li><p><strong>长时间运行的查询或事务：</strong></p><ul><li>如果有长时间运行的查询或者事务占用了数据库资源，可能会影响到其他连接的正常使用，导致连接超时。</li></ul></li><li><p><strong>数据库死锁：</strong></p><ul><li>数据库中出现死锁情况时，会导致某些连接无法获取所需资源而超时。</li></ul></li><li><p><strong>数据库连接池泄漏：</strong></p><ul><li>如果应用程序中存在数据库连接池泄漏，即获取了连接但未释放，会导致连接池中的连接被耗尽，进而造成连接超时。</li></ul></li></ul><h3 id="b-mysql-语句执行超时" tabindex="-1"><a class="header-anchor" href="#b-mysql-语句执行超时"><span>b. Mysql 语句执行超时</span></a></h3><ol><li><strong>Lock Wait Timeout</strong></li><li><strong>Deadlock</strong></li></ol><p><code>MySQL lock wait timeout</code>和<code>deadlock</code>是两种不同的数据库并发控制问题，具有不同的原因和解决方法。</p><ul><li><strong>Lock Wait Timeout</strong>: <ul><li>当一个事务在等待另一个事务持有的锁超过了指定的时间时，就会发生<code>MySQL lock wait timeout</code>。这种情况通常发生在一个事务试图获取一个被另一个事务持有的锁时，但由于另一个事务未释放锁，导致当前事务一直处于等待状态。</li><li>原因可能是锁竞争，或者某些事务长时间占用锁导致其他事务等待超时。解决方法通常是优化查询、合理设计事务逻辑、增加数据库连接池等。</li><li>这种情况下，通常不会出现死锁，因为没有循环等待的情况。</li></ul></li><li><strong>Deadlock</strong>: <ul><li><code>Deadlock</code>是指两个或多个事务相互等待对方持有的锁，导致所有事务都无法继续执行的情况。例如，事务A持有锁1并等待锁2，而事务B持有锁2并等待锁1，这样就形成了死锁。</li><li>发生死锁时，MySQL会检测到并中断其中一个事务（通常是后发生的事务），释放其持有的锁以解除死锁。被中断的事务会收到一个错误信息，可以在应用程序中捕获并处理。</li><li>解决死锁的方法包括通过数据库配置、优化查询、调整事务逻辑、尽量减少事务持有锁的时间等手段来减少死锁的发生概率。</li></ul></li></ul><p>总的来说，<code>MySQL lock wait timeout</code>是一个事务在等待锁超时的情况，而<code>deadlock</code>是多个事务相互等待对方持有的锁而无法继续执行的情况。两者的处理方式和原因略有不同，但都是数据库并发控制中需要关注和解决的问题。</p><h3 id="c-openfeign-超时" tabindex="-1"><a class="header-anchor" href="#c-openfeign-超时"><span>c. OpenFeign 超时</span></a></h3><p><code>OpenFeign</code>超时通常是于网络延迟、目标服务响应时间长或者请求量大导致的。要解决<code>OpenFeign</code>超时问题，可以考虑以下几个方面：</p><ul><li><strong>调整超时时间</strong>：可以通过配置<code>OpenFeign</code>的连接超时时间和读取超时时间来适应不同的网络环境和服务响应时间。通过增加超时时间来容忍更长的响应时间，或者减少超时时间来更快地失败并重试。</li><li><strong>优化目标服务</strong>：如果目标服务响应时间过长，可以考虑对目标服务进行优化，包括优化数据库查询、提高服务性能、减少网络延迟等，以缩短响应时间。</li><li><strong>限流和熔断</strong>：通过限流和熔断等机制控制请求流量，避免因请求过多导致服务响应变慢。可以使用类似<code>Hystrix</code>等熔断器来在目标服务不可用时快速失败，而不是无限等待。</li><li><strong>并发调用</strong>：如果<code>OpenFeign</code>客户端需要大量并发调用目标服务，可以考虑使用连接池来管理HTTP连接，以减少建立连接的开销，并提高请求的并发性能。</li><li><strong>重试机制</strong>：在<code>OpenFeign</code>客户端配置重试机制，可以在请求超时或失败时进行重试，以增加请求成功的概率。</li><li><strong>日志记录</strong>：记录<code>OpenFeign</code>请求和响应的日志，以便及时发现问题并进行排查。</li></ul><h3 id="d-应用程序-oom" tabindex="-1"><a class="header-anchor" href="#d-应用程序-oom"><span>d. 应用程序 OOM</span></a></h3><ul><li>出现该超时也是意料之中，因为当前业务大量的利用内存去实现，而<code>VM</code>参数又没有调整。</li></ul><h3 id="e-nacos-oom" tabindex="-1"><a class="header-anchor" href="#e-nacos-oom"><span>e. nacos OOM</span></a></h3><ul><li>默认单机启动的<code>VM</code>参数500M左右，并发一高根本不够用，参考官方文档 <code>nacos2.x </code>的配置即可</li></ul><h3 id="f-mysql-关联查询语句执行缓慢" tabindex="-1"><a class="header-anchor" href="#f-mysql-关联查询语句执行缓慢"><span>f. Mysql 关联查询语句执行缓慢</span></a></h3><ul><li>语句执行慢可能是因为没有加索引导致出现间隙锁甚至锁表</li><li>大表关联查询数据量越大执行越慢</li><li>sql 参数传递过多</li></ul><h3 id="g-redis-获取连接超时" tabindex="-1"><a class="header-anchor" href="#g-redis-获取连接超时"><span>g. redis 获取连接超时</span></a></h3><ul><li>不要使用默认连接池，使用<code>jedis</code>连接池。</li></ul><h2 id="_4、解决办法" tabindex="-1"><a class="header-anchor" href="#_4、解决办法"><span>4、解决办法</span></a></h2><h4 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h4><h5 id="重新配置druid数据源" tabindex="-1"><a class="header-anchor" href="#重新配置druid数据源"><span>重新配置druid数据源</span></a></h5><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token comment"># 初始连接数</span>
      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token comment"># 最小连接池数量</span>
      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>
      <span class="token comment"># 最大连接池数量</span>
      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">40</span>
      <span class="token comment"># 配置获取连接等待超时的时间</span>
      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span>
      <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span>
      <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">300000</span>
      <span class="token comment"># 配置一个连接在池中最大生存的时间，单位是毫秒</span>
      <span class="token key atrule">max-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">900000</span>
      <span class="token comment"># 配置检测连接是否有效</span>
      <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL
      <span class="token comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span>
      <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>
      <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span>
      <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token comment"># 配置监拉统计挡成的filters. stat: 监控统计、Log4j:日志记录、waLL: 防御sqL注入</span>
      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span> slf4j
      <span class="token comment"># 是否缓存preparedStatement</span>
      <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment"># 连接超时时间，指的是连接数据库时等待数据库的响应时间。如果在指定的时间内没有建立连接，连接就会失败</span>
      <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment"># Socket超时时间，指的是已经建立连接后，发送请求后等待数据库响应的时间。如果在指定的时间内没有接收到响应，连接将被关闭。</span>
      <span class="token key atrule">socket-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
      <span class="token comment"># 是否启用TCP连接的Keep-Alive机制。Keep-Alive机制是一种保持长连接的机制，它允许在一段时间内没有数据交换时保持连接处于打开状态，而不被服务器关闭。设置为true表示启用Keep-Alive机制。</span>
      <span class="token key atrule">keep-alive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="调整mysql-服务配置" tabindex="-1"><a class="header-anchor" href="#调整mysql-服务配置"><span>调整mysql 服务配置</span></a></h5><ul><li>设置max_connections和connect_timeout</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 查询语句</span>
<span class="token keyword">show</span> VARIABLES <span class="token operator">like</span> <span class="token string">&#39;%timeout%&#39;</span>
<span class="token keyword">show</span> VARIABLES <span class="token operator">like</span> <span class="token string">&#39;%connection%&#39;</span>

<span class="token comment"># 配置语句，重启则失效。</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> connect_timeout <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> max_connections <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>

<span class="token comment"># 可选配置调整</span>
mysqlx_read_timeout 默认<span class="token number">30</span> 和 mysqlx_write_timeout 默认<span class="token number">60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>锁等待超时时间</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># innodb_lock_wait_timeout</span>
是MySQL <span class="token keyword">InnoDB</span>存储引擎的一个参数，用于指定事务等待锁释放的超时时间，单位为秒。具体来说，如果一个事务请求获取一个被其他事务持有的锁，那么它会等待一段时间（由innodb_lock_wait_timeout指定），如果在这段时间内锁没有被释放，该事务将抛出一个超时错误。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="升级cpu和内存" tabindex="-1"><a class="header-anchor" href="#升级cpu和内存"><span>升级CPU和内存</span></a></h5><ul><li>升级CPU的同时需要调整druid连接池的最大连接池数量<code>max-active</code></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>max<span class="token punctuation">-</span>active 参数默认为8，一般可配置为：CPU核数 x 3 + 1；
配置越大，执行可能越慢，cpu也会升高；
配置低了可能导致高并发时获取不到连接。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>需要注意的是CPU升级的同时，需要考虑数据库并发事务带来的影响。</li></ul><h4 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h4><p>在高并发时，发现redis经常会出现获取不到连接或者超时。查阅相关资料得出结论并验证后解决办法：</p><ul><li>指定<code>jedis</code>为<code>redistemplate</code>连接池</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code># 在redis starter中排除掉依赖并引入jedis包即可

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="openfeign" tabindex="-1"><a class="header-anchor" href="#openfeign"><span>OpenFeign</span></a></h4><h5 id="配置连接池" tabindex="-1"><a class="header-anchor" href="#配置连接池"><span>配置连接池</span></a></h5><ul><li>POM 引入相关依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- openFeign 依赖包--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在yml中配置启用</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> basic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置超时时间" tabindex="-1"><a class="header-anchor" href="#配置超时时间"><span>配置超时时间</span></a></h5><ul><li>全局配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> basic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为单个服务设置超时时间</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#对单个服务设置超时，会覆盖默认的超时</span>
feign.client.config.springboot<span class="token punctuation">-</span>mybatis.connectTimeout=2000
feign.client.config.springboot<span class="token punctuation">-</span>mybatis.readTimeout=11000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为单个接口设置超时时间</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># thinking...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="配置重试次数" tabindex="-1"><a class="header-anchor" href="#配置重试次数"><span>配置重试次数</span></a></h5><ul><li>如果不配置，openfeign默认是不重试的，看FeignClientsConfiguration中的代码：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
<span class="token keyword">public</span> <span class="token class-name">Retryer</span> <span class="token function">feignRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Retryer</span><span class="token punctuation">.</span><span class="token constant">NEVER_RETRY</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重试的配置</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfigure</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Retryer</span> <span class="token function">feignRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用默认的重试策略，最大重试次数为5，初始间隔为100毫秒，最大间隔为1秒，间隔乘数为2</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Retryer<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义重试策略 <ul><li>实现Retryer接口，自定义重试策略</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RetryableException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">Retryer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRetryer</span> <span class="token keyword">implements</span> <span class="token class-name">Retryer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxAttempts<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> period<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxPeriod<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> attempt<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomRetryer</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxAttempts<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token keyword">long</span> maxPeriod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxAttempts <span class="token operator">=</span> maxAttempts<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">=</span> period<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPeriod <span class="token operator">=</span> maxPeriod<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>attempt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">continueOrPropagate</span><span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attempt<span class="token operator">++</span> <span class="token operator">&gt;=</span> maxAttempts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> interval <span class="token operator">=</span> <span class="token function">getNextInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Retryer</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRetryer</span><span class="token punctuation">(</span>maxAttempts<span class="token punctuation">,</span> period<span class="token punctuation">,</span> maxPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">getNextInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> nextInterval <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attempt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nextInterval<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>CustomRetryer</code>类实现了<code>feign.Retryer</code>接口，并覆盖了其中的两个方法：<code>continueOrPropagate</code>和<code>clone</code>。<code>continueOrPropagate</code>方法定义了重试逻辑，当发生重试时，该方法会决定是否继续重试或者抛出异常。<code>clone</code>方法用于克隆一个重试器实例。</p><p>你可以根据需要调整<code>CustomRetryer</code>类中的重试次数、重试间隔和最大间隔等参数。然后，在配置类中使用自定义的重试器，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomRetryer</span> <span class="token function">customRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自定义重试策略</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jvm启动参数" tabindex="-1"><a class="header-anchor" href="#jvm启动参数"><span>JVM启动参数</span></a></h4><h5 id="应用程序" tabindex="-1"><a class="header-anchor" href="#应用程序"><span>应用程序</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-Xmx4g
-Xms4g
-XX:+UseG1GC
-XX:MaxGCPauseMillis=50
-XX:ParallelGCThreads=4
-XX:+PrintGCDetails
-XX:+PrintGCDateStamps
-Xloggc:./kwin-dealer/gc.log
-XX:MaxMetaspaceSize=2g
-Xss1m
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=D:\\MyWorkPlace\\Kwin\\kwin-cloud-bloc\\kwin-dealer\\
-Dsun.net.client.defaultConnectTimeout=2000
-Dsun.net.client.defaultReadTimeout=2000
-Duser.timezone=GMT+08
-Dfile.encoding=UTF-8
-XX:MaxHeapFreeRatio=40
-XX:+AlwaysPreTouch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos"><span>nacos</span></a></h5><blockquote><p>https://nacos.io/docs/v2/upgrading/200-compatibility/</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>JAVA_OPT=&quot;\${JAVA_OPT} -server -Xms9216m -Xmx9216m  -XX:MaxDirectMemorySize=4096m -XX:NewSize=4096m  -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics   -DisPushContent=false -XX:MaxNewSize=4096m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=512m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Xloggc:/home/admin/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -DQUERYTIMEOUT=90  -XX:SurvivorRatio=10 -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/nacos/logs -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:CMSMaxAbortablePrecleanTime=5000 -XX:CMSInitiatingOccupancyFraction=74 -XX:+UseCMSInitiatingOccupancyOnly -XX:ParallelGCThreads=8 -Dnacos.core.auth.enabled=false &quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="mysql-慢查询" tabindex="-1"><a class="header-anchor" href="#mysql-慢查询"><span>Mysql 慢查询</span></a></h4><ul><li>大表关联查询转为储存过程</li><li>增加索引，避免锁表</li><li>设置合适的隔离级别</li><li>缩小事务，避免执行批量语句。批量sql执行效率在高并发时容易造成<code>lock wait</code>超时，即使<code>where</code>条件是采用主键或者唯一索引依然如此</li><li>预防死锁</li></ul>`,80),p=[l];function i(o,c){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","mysql_opt_case_01.html.vue"]]),r=JSON.parse('{"path":"/essay/mysql_opt_case_01.html","title":"Mysql优化丨项目刚上线","lang":"zh-CN","frontmatter":{"order":1,"star":true,"date":"2024-04-17T00:00:00.000Z","copyright":false,"footer":true,"category":["随笔"],"tag":["随笔","mysql"]},"headers":[{"level":2,"title":"1、如何优化Mysql?","slug":"_1、如何优化mysql","link":"#_1、如何优化mysql","children":[]},{"level":2,"title":"2、如何加索引？","slug":"_2、如何加索引","link":"#_2、如何加索引","children":[]},{"level":2,"title":"3、场景回顾","slug":"_3、场景回顾","link":"#_3、场景回顾","children":[{"level":3,"title":"a.  获取数据库连接超时","slug":"a-获取数据库连接超时","link":"#a-获取数据库连接超时","children":[]},{"level":3,"title":"b. Mysql 语句执行超时","slug":"b-mysql-语句执行超时","link":"#b-mysql-语句执行超时","children":[]},{"level":3,"title":"c. OpenFeign 超时","slug":"c-openfeign-超时","link":"#c-openfeign-超时","children":[]},{"level":3,"title":"d. 应用程序 OOM","slug":"d-应用程序-oom","link":"#d-应用程序-oom","children":[]},{"level":3,"title":"e. nacos OOM","slug":"e-nacos-oom","link":"#e-nacos-oom","children":[]},{"level":3,"title":"f. Mysql 关联查询语句执行缓慢","slug":"f-mysql-关联查询语句执行缓慢","link":"#f-mysql-关联查询语句执行缓慢","children":[]},{"level":3,"title":"g. redis 获取连接超时","slug":"g-redis-获取连接超时","link":"#g-redis-获取连接超时","children":[]}]},{"level":2,"title":"4、解决办法","slug":"_4、解决办法","link":"#_4、解决办法","children":[]}],"git":{"createdTime":1713520932000,"updatedTime":1723008369000,"contributors":[{"name":"mxoop","email":"1592013653@qq.com","commits":2}]},"readingTime":{"minutes":11.48,"words":3444},"filePathRelative":"essay/mysql_opt_case_01.md","localizedDate":"2024年4月17日","excerpt":"\\n<p><em><strong>前言：</strong></em> 本文记录的是一次从开发到测试环境上线的接口调优之MySQL调优手段以及部署上线压测遇到的其他问题解决</p>\\n<hr>\\n<h2>1、如何优化Mysql?</h2>\\n<p>最好是按照以下顺序优化：</p>\\n<ol>\\n<li>SQL 语句及索引的优化</li>\\n<li>数据库表结构的优化</li>\\n<li>系统配置的优化</li>\\n<li>硬件的优化</li>\\n</ol>\\n<h2>2、如何加索引？</h2>\\n<p>在加索引之前我们首先要知道MySQL索引一共有哪些类型以及它们的区别，对数据库有哪些影响。所以在加索引之前要考虑以下几点：</p>"}');export{d as comp,r as data};
